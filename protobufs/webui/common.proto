import "steammessages_unified_base.steamclient.proto";

// Used by: common.proto
message CAppBootstrapData {
	optional uint32 appid = 1;
	optional bool hidden = 2;
	repeated string user_tag = 3;
}

// Used by: common.proto
message CAppOverview {
	optional uint32 appid = 1;
	optional string display_name = 2;
	optional bool visible_in_game_list = 4;
	optional string sort_as = 6;
	optional int32 app_type = 7 [(description) = "enum"];
	optional uint32 mru_index = 13;
	optional uint32 rt_recent_activity_time = 14 [default = 0];
	optional uint32 minutes_playtime_forever = 16 [default = 0];
	optional uint32 minutes_playtime_last_two_weeks = 17 [default = 0];
	optional uint32 rt_last_time_played = 18 [default = 0];
	repeated uint32 store_tag = 19;
	repeated .CAppOverview_AppAssociation association = 20;
	repeated uint32 store_category = 23;
	optional uint32 rt_original_release_date = 25 [default = 0];
	optional uint32 rt_steam_release_date = 26 [default = 0];
	optional string icon_hash = 27;
	optional string logo_hash = 30;
	optional int32 controller_support = 31 [(description) = "enum"];
	optional bool vr_supported = 32;
	optional uint32 metacritic_score = 36;
	optional uint64 size_on_disk = 37;
	optional bool third_party_mod = 38;
	optional string icon_data = 39;
	optional string icon_data_format = 40;
	optional string gameid = 41;
	optional string library_capsule_filename = 42;
	repeated .CAppOverview_PerClientData per_client_data = 43;
	optional uint64 most_available_clientid = 44;
	optional uint64 selected_clientid = 45;
	optional uint32 rt_store_asset_mtime = 46;
	optional uint32 rt_custom_image_mtime = 47;
	optional uint32 optional_parent_app_id = 48;
	optional uint32 owner_account_id = 49;
	optional bool compat_mapping_enabled = 50;
	optional uint32 compat_mapping_priority = 51;
	optional string compat_mapping_tool_name = 52;
	optional uint32 review_score_with_bombs = 53;
	optional uint32 review_percentage_with_bombs = 54;
	optional uint32 review_score_without_bombs = 55;
	optional uint32 review_percentage_without_bombs = 56;
	optional string library_id = 57;
	optional bool vr_only = 58;
	optional uint32 mastersub_appid = 59;
	optional string mastersub_includedwith_logo = 60;
	optional uint32 compat_allowlist_setting = 61 [default = 0];
	optional string site_license_site_name = 62;
	optional uint32 shortcut_override_appid = 63;
	optional int32 steam_deck_compat_category = 64 [(description) = "enum"];
	optional uint32 rt_last_time_locally_played = 65;
	optional uint32 rt_purchased_time = 66;
	repeated .CSteamDeckCompatTestResult steam_deck_compat_test_results = 67;
}

// Used by: common.proto
message CAppOverview_AppAssociation {
	optional int32 type = 1 [(description) = "enum"];
	optional string name = 2;
}

message CAppOverview_Change {
	repeated .CAppOverview app_overview = 1;
	repeated uint32 removed_appid = 2;
}

// Used by: common.proto
message CAppOverview_PerClientData {
	optional uint64 clientid = 1;
	optional string client_name = 2;
	optional int32 display_status = 3 [(description) = "enum"];
	optional uint32 status_percentage = 4 [default = 0];
	optional string active_beta = 5;
	optional bool installed = 6;
	optional uint64 bytes_downloaded = 7 [default = 0];
	optional uint64 bytes_total = 8 [default = 0];
	optional bool streaming_to_local_client = 9;
	optional bool is_available_on_current_platform = 10;
	optional bool is_invalid_os_type = 11;
	optional uint32 playtime_left = 12;
	optional int32 cloud_status = 13 [(description) = "enum"];
}

// Used by: ChatRoom,ClanChatRooms,ChatRoomClient
message CChatPartyBeacon {
	optional uint32 app_id = 1;
	optional fixed64 steamid_owner = 2;
	optional fixed64 beacon_id = 3;
	optional string game_metadata = 4;
}

// Used by: ChatRoom,ClanChatRooms,ChatRoomClient
message CChatRoleActions {
	optional uint64 role_id = 1;
	optional bool can_create_rename_delete_channel = 2;
	optional bool can_kick = 3;
	optional bool can_ban = 4;
	optional bool can_invite = 5;
	optional bool can_change_tagline_avatar_name = 6;
	optional bool can_chat = 7;
	optional bool can_view_history = 8;
	optional bool can_change_group_roles = 9;
	optional bool can_change_user_roles = 10;
	optional bool can_mention_all = 11;
	optional bool can_set_watching_broadcast = 12;
}

// Used by: ChatRoom,ClanChatRooms,ChatRoomClient
message CChatRoom_GetChatRoomGroupSummary_Response {
	optional uint64 chat_group_id = 1;
	optional string chat_group_name = 2;
	optional uint32 active_member_count = 3;
	optional uint32 active_voice_member_count = 4;
	optional uint64 default_chat_id = 5;
	repeated .CChatRoomState chat_rooms = 6;
	optional uint32 clanid = 7;
	optional string chat_group_tagline = 8;
	optional uint32 accountid_owner = 9;
	repeated uint32 top_members = 10;
	optional bytes chat_group_avatar_sha = 11;
	optional int32 rank = 12 [(description) = "enum"];
	optional uint64 default_role_id = 13;
	repeated uint64 role_ids = 14;
	repeated .CChatRoleActions role_actions = 15;
	optional uint32 watching_broadcast_accountid = 16;
	optional uint32 appid = 17;
	repeated .CChatPartyBeacon party_beacons = 18;
	optional uint64 watching_broadcast_channel_id = 19;
	optional uint64 active_minigame_id = 20;
	optional string avatar_ugc_url = 21;
	optional bool disabled = 22;
}

// Used by: ChatRoom,ClanChatRooms,ChatRoomClient
message CChatRoomState {
	optional uint64 chat_id = 1;
	optional string chat_name = 2;
	optional bool voice_allowed = 3;
	repeated uint32 members_in_voice = 4;
	optional uint32 time_last_message = 5;
	optional uint32 sort_order = 6;
	optional string last_message = 7;
	optional uint32 accountid_last_message = 8;
}

message CClientNotificationAchievement {
	optional string achievement_id = 1;
	optional uint32 appid = 2;
	optional string name = 3;
	optional string description = 4;
	optional string image_url = 5;
	optional bool achieved = 6;
	optional uint32 rtime_unlocked = 7;
	optional float min_progress = 8;
	optional float current_progress = 9;
	optional float max_progress = 10;
	optional float global_achieved_pct = 11;
}

message CClientNotificationCloudSyncConflict {
	optional uint32 appid = 1;
}

message CClientNotificationCloudSyncFailure {
	optional uint32 appid = 1;
}

message CClientNotificationDownloadCompleted {
	optional uint32 appid = 1;
}

message CClientNotificationFamilySharingDeviceAuthorizationChanged {
	optional uint32 accountid_owner = 1;
	optional bool authorized = 2;
}

message CClientNotificationFamilySharingLibraryAvailable {
	optional uint32 accountid_owner = 1;
}

message CClientNotificationFamilySharingStopPlaying {
	optional uint32 accountid_owner = 1;
	optional uint32 seconds_remaining = 2;
}

message CClientNotificationFriendInGame {
	optional fixed64 steamid = 1;
	optional string game_name = 2;
}

message CClientNotificationFriendInvite {
	optional fixed64 steamid = 1;
}

message CClientNotificationFriendInviteRollup {
	optional uint32 new_invite_count = 1;
}

message CClientNotificationFriendMessage {
	optional string tag = 1;
	optional string steamid = 2;
	optional string title = 3;
	optional string body = 4;
	optional string icon = 5;
	optional uint32 notificationid = 6;
}

message CClientNotificationFriendOnline {
	optional fixed64 steamid = 1;
}

message CClientNotificationGroupChatMessage {
	optional string tag = 1;
	optional string steamid_sender = 2;
	optional string chat_group_id = 3;
	optional string chat_id = 4;
	optional string title = 5;
	optional string body = 6;
	optional string rawbody = 7;
	optional string icon = 8;
	optional uint32 notificationid = 9;
}

message CClientNotificationLowBattery {
	optional float pct_remaining = 1;
}

message CClientNotificationScreenshot {
	optional string screenshot_handle = 1;
	optional string description = 2;
	optional string local_url = 3;
}

message CClientNotificationSystemUpdate {
	optional int32 type = 1 [(description) = "enum"];
}

// Used by: Cloud,common.proto
message CCloud_PendingRemoteOperation {
	optional int32 operation = 1 [(description) = "enum"];
	optional string machine_name = 2;
	optional uint64 client_id = 3;
	optional uint32 time_last_updated = 4;
}

message CGameNetworkingUI_ConnectionState {
	optional string connection_key = 1;
	optional uint32 appid = 2;
	optional fixed32 connection_id_local = 3;
	optional string identity_local = 4;
	optional string identity_remote = 5;
	optional uint32 connection_state = 10;
	optional uint32 start_time = 12;
	optional uint32 close_time = 13;
	optional uint32 close_reason = 14;
	optional string close_message = 15;
	optional string status_loc_token = 16;
	optional uint32 transport_kind = 20;
	optional string sdrpopid_local = 21;
	optional string sdrpopid_remote = 22;
	optional string address_remote = 23;
	optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
	optional uint32 ping_interior = 25;
	optional uint32 ping_remote_front = 26;
	optional uint32 ping_default_internet_route = 27;
	optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
	optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
	optional uint64 e2e_quality_remote_instantaneous_time = 32;
	optional uint64 e2e_quality_remote_lifetime_time = 33;
	optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
	optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
	optional uint64 front_quality_remote_instantaneous_time = 42;
	optional uint64 front_quality_remote_lifetime_time = 43;
}

message CLibraryBootstrapData {
	repeated .CAppBootstrapData app_data = 1;
}

message CMsgAuthTicket {
	optional uint32 estate = 1;
	optional uint32 eresult = 2 [default = 2];
	optional fixed64 steamid = 3;
	optional fixed64 gameid = 4;
	optional uint32 h_steam_pipe = 5;
	optional uint32 ticket_crc = 6;
	optional bytes ticket = 7;
}

message CMsgBadgeCraftedNotification {
	optional uint32 appid = 1;
	optional uint32 badge_level = 2;
}

message CMsgBluetoothSettings {
	optional bool is_enabled = 1;
}

message CMsgClientAccountInfo {
	optional string persona_name = 1;
	optional string ip_country = 2;
	optional int32 count_authed_computers = 5;
	optional uint32 account_flags = 7;
	optional uint64 facebook_id = 8;
	optional string facebook_name = 9;
	optional bool steamguard_notify_newmachines = 14;
	optional string steamguard_machine_name_user_chosen = 15;
	optional bool is_phone_verified = 16;
	optional uint32 two_factor_state = 17;
	optional bool is_phone_identifying = 18;
	optional bool is_phone_needing_reverify = 19;
}

message CMsgClientAddFriendToGroup {
	optional int32 groupid = 1;
	optional fixed64 steamiduser = 2;
}

message CMsgClientAddFriendToGroupResponse {
	optional uint32 eresult = 1;
}

message CMsgClientAMGetPersonaNameHistory {
	optional int32 id_count = 1;
	repeated .CMsgClientAMGetPersonaNameHistory_IdInstance Ids = 2;
}

// Used by: common.proto
message CMsgClientAMGetPersonaNameHistory_IdInstance {
	optional fixed64 steamid = 1;
}

message CMsgClientAMGetPersonaNameHistoryResponse {
	repeated .CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance responses = 2;
}

// Used by: common.proto
message CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance {
	optional int32 eresult = 1 [default = 2];
	optional fixed64 steamid = 2;
	repeated .CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance names = 3;
}

// Used by: common.proto
message CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance {
	optional fixed32 name_since = 1;
	optional string name = 2;
}

message CMsgClientChangeStatus {
	optional uint32 persona_state = 1;
	optional string player_name = 2;
	optional bool is_auto_generated_name = 3;
	optional bool high_priority = 4;
	optional bool persona_set_by_user = 5;
	optional uint32 persona_state_flags = 6 [default = 0];
	optional bool need_persona_response = 7;
	optional bool is_client_idle = 8;
}

message CMsgClientClanState {
	optional fixed64 steamid_clan = 1;
	optional uint32 clan_account_flags = 3;
	optional .CMsgClientClanState_NameInfo name_info = 4;
	optional .CMsgClientClanState_UserCounts user_counts = 5;
	repeated .CMsgClientClanState_Event events = 6;
	repeated .CMsgClientClanState_Event announcements = 7;
	optional bool chat_room_private = 8;
}

// Used by: common.proto
message CMsgClientClanState_Event {
	optional fixed64 gid = 1;
	optional uint32 event_time = 2;
	optional string headline = 3;
	optional fixed64 game_id = 4;
	optional bool just_posted = 5;
}

// Used by: common.proto
message CMsgClientClanState_NameInfo {
	optional string clan_name = 1;
	optional bytes sha_avatar = 2;
}

// Used by: common.proto
message CMsgClientClanState_UserCounts {
	optional uint32 members = 1;
	optional uint32 online = 2;
	optional uint32 chatting = 3;
	optional uint32 in_game = 4;
	optional uint32 chat_room_members = 5;
}

message CMsgClientCreateFriendsGroup {
	optional fixed64 steamid = 1;
	optional string groupname = 2;
	repeated fixed64 steamid_friends = 3;
}

message CMsgClientCreateFriendsGroupResponse {
	optional uint32 eresult = 1;
	optional int32 groupid = 2;
}

message CMsgClientDeleteFriendsGroup {
	optional fixed64 steamid = 1;
	optional int32 groupid = 2;
}

message CMsgClientDeleteFriendsGroupResponse {
	optional uint32 eresult = 1;
}

message CMsgClientEmoticonList {
	repeated .CMsgClientEmoticonList_Emoticon emoticons = 1;
	repeated .CMsgClientEmoticonList_Sticker stickers = 2;
	repeated .CMsgClientEmoticonList_Effect effects = 3;
}

// Used by: common.proto
message CMsgClientEmoticonList_Effect {
	optional string name = 1;
	optional int32 count = 2;
	optional uint32 time_received = 3;
	optional bool infinite_use = 4;
	optional uint32 appid = 5;
}

// Used by: common.proto
message CMsgClientEmoticonList_Emoticon {
	optional string name = 1;
	optional int32 count = 2;
	optional uint32 time_last_used = 3;
	optional uint32 use_count = 4;
	optional uint32 time_received = 5;
	optional uint32 appid = 6;
}

// Used by: common.proto
message CMsgClientEmoticonList_Sticker {
	optional string name = 1;
	optional int32 count = 2;
	optional uint32 time_received = 3;
	optional uint32 appid = 4;
	optional uint32 time_last_used = 5;
	optional uint32 use_count = 6;
}

message CMsgClientGetClanActivityCounts {
	repeated uint64 steamid_clans = 1;
}

message CMsgClientGetEmoticonList {
}

message CMsgClientHeartBeat {
	optional bool send_reply = 1;
}

message CMsgClientInviteToGame {
	optional fixed64 steam_id_dest = 1;
	optional fixed64 steam_id_src = 2;
	optional string connect_string = 3;
	optional string remote_play = 4;
}

message CMsgClientItemAnnouncements {
	optional uint32 count_new_items = 1;
	repeated .CMsgClientItemAnnouncements_UnseenItem unseen_items = 2;
}

// Used by: common.proto
message CMsgClientItemAnnouncements_UnseenItem {
	optional uint32 appid = 1;
	optional uint64 context_id = 2;
	optional uint64 asset_id = 3;
	optional uint64 amount = 4;
	optional fixed32 rtime32_gained = 5;
	optional uint32 source_appid = 6;
}

message CMsgClientLoggedOff {
	optional int32 eresult = 1 [default = 2];
}

message CMsgClientLogon {
	optional uint32 protocol_version = 1;
	optional uint32 deprecated_obfustucated_private_ip = 2;
	optional uint32 cell_id = 3;
	optional uint32 last_session_id = 4;
	optional uint32 client_package_version = 5;
	optional string client_language = 6;
	optional uint32 client_os_type = 7;
	optional bool should_remember_password = 8 [default = false];
	optional string wine_version = 9;
	optional uint32 deprecated_10 = 10;
	optional .CMsgIPAddress obfuscated_private_ip = 11;
	optional uint32 deprecated_public_ip = 20;
	optional uint32 qos_level = 21;
	optional fixed64 client_supplied_steam_id = 22;
	optional .CMsgIPAddress public_ip = 23;
	optional bytes machine_id = 30;
	optional uint32 launcher_type = 31 [default = 0];
	optional uint32 ui_mode = 32 [default = 0];
	optional uint32 chat_mode = 33 [default = 0];
	optional bytes steam2_auth_ticket = 41;
	optional string email_address = 42;
	optional fixed32 rtime32_account_creation = 43;
	optional string account_name = 50;
	optional string password = 51;
	optional string game_server_token = 52;
	optional string login_key = 60;
	optional bool was_converted_deprecated_msg = 70 [default = false];
	optional string anon_user_target_account_name = 80;
	optional fixed64 resolved_user_steam_id = 81;
	optional int32 eresult_sentryfile = 82;
	optional bytes sha_sentryfile = 83;
	optional string auth_code = 84;
	optional int32 otp_type = 85;
	optional uint32 otp_value = 86;
	optional string otp_identifier = 87;
	optional bool steam2_ticket_request = 88;
	optional bytes sony_psn_ticket = 90;
	optional string sony_psn_service_id = 91;
	optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
	optional string sony_psn_name = 93;
	optional int32 game_server_app_id = 94;
	optional bool steamguard_dont_remember_computer = 95;
	optional string machine_name = 96;
	optional string machine_name_userchosen = 97;
	optional string country_override = 98;
	optional bool is_steam_box = 99;
	optional uint64 client_instance_id = 100;
	optional string two_factor_code = 101;
	optional bool supports_rate_limit_response = 102;
	optional string web_logon_nonce = 103;
	optional int32 priority_reason = 104;
	optional .CMsgClientSecret embedded_client_secret = 105;
	optional bool disable_partner_autogrants = 106;
	optional bool is_steam_deck = 107;
}

message CMsgClientLogonResponse {
	optional int32 eresult = 1 [default = 2];
	optional int32 legacy_out_of_game_heartbeat_seconds = 2;
	optional int32 heartbeat_seconds = 3;
	optional uint32 deprecated_public_ip = 4;
	optional fixed32 rtime32_server_time = 5;
	optional uint32 account_flags = 6;
	optional uint32 cell_id = 7;
	optional string email_domain = 8;
	optional bytes steam2_ticket = 9;
	optional int32 eresult_extended = 10;
	optional string webapi_authenticate_user_nonce = 11;
	optional uint32 cell_id_ping_threshold = 12;
	optional bool deprecated_use_pics = 13;
	optional string vanity_url = 14;
	optional .CMsgIPAddress public_ip = 15;
	optional fixed64 client_supplied_steamid = 20;
	optional string ip_country_code = 21;
	optional bytes parental_settings = 22;
	optional bytes parental_setting_signature = 23;
	optional int32 count_loginfailures_to_migrate = 24;
	optional int32 count_disconnects_to_migrate = 25;
	optional int32 ogs_data_report_time_window = 26;
	optional uint64 client_instance_id = 27;
	optional bool force_client_update_check = 28;
	optional string agreement_session_url = 29;
}

message CMsgClientManageFriendsGroup {
	optional int32 groupid = 1;
	optional string groupname = 2;
	repeated fixed64 steamid_friends_added = 3;
	repeated fixed64 steamid_friends_removed = 4;
}

message CMsgClientManageFriendsGroupResponse {
	optional uint32 eresult = 1;
}

message CMsgClientMMSInviteToLobby {
	optional uint32 app_id = 1;
	optional fixed64 steam_id_lobby = 2;
	optional fixed64 steam_id_user_invited = 3;
}

message CMsgClientPersonaState {
	optional uint32 status_flags = 1;
	repeated .CMsgClientPersonaState_Friend friends = 2;
}

// Used by: ChatRoom,ChatRoomClient,common.proto
message CMsgClientPersonaState_Friend {
	optional fixed64 friendid = 1;
	optional uint32 persona_state = 2;
	optional uint32 game_played_app_id = 3;
	optional uint32 game_server_ip = 4;
	optional uint32 game_server_port = 5;
	optional uint32 persona_state_flags = 6;
	optional uint32 online_session_instances = 7;
	optional bool persona_set_by_user = 10;
	optional string player_name = 15;
	optional uint32 query_port = 20;
	optional fixed64 steamid_source = 25;
	optional bytes avatar_hash = 31;
	optional uint32 last_logoff = 45;
	optional uint32 last_logon = 46;
	optional uint32 last_seen_online = 47;
	optional uint32 clan_rank = 50;
	optional string game_name = 55;
	optional fixed64 gameid = 56;
	optional bytes game_data_blob = 60;
	optional .CMsgClientPersonaState_Friend_ClanData clan_data = 64;
	optional string clan_tag = 65;
	repeated .CMsgClientPersonaState_Friend_KV rich_presence = 71;
	optional fixed64 broadcast_id = 72;
	optional fixed64 game_lobby_id = 73;
	optional uint32 watching_broadcast_accountid = 74;
	optional uint32 watching_broadcast_appid = 75;
	optional uint32 watching_broadcast_viewers = 76;
	optional string watching_broadcast_title = 77;
	optional bool is_community_banned = 78;
	optional bool player_name_pending_review = 79;
	optional bool avatar_pending_review = 80;
}

// Used by: ChatRoom,ChatRoomClient,common.proto
message CMsgClientPersonaState_Friend_ClanData {
	optional uint32 ogg_app_id = 1;
	optional uint64 chat_group_id = 2;
}

// Used by: ChatRoom,ChatRoomClient,common.proto
message CMsgClientPersonaState_Friend_KV {
	optional string key = 1;
	optional string value = 2;
}

message CMsgClientRemoveFriendFromGroup {
	optional int32 groupid = 1;
	optional fixed64 steamiduser = 2;
}

message CMsgClientRemoveFriendFromGroupResponse {
	optional uint32 eresult = 1;
}

message CMsgClientRequestFriendData {
	optional uint32 persona_state_requested = 1;
	repeated fixed64 friends = 2;
}

// Used by: common.proto
message CMsgClientSecret {
	optional uint32 version = 1;
	optional uint32 appid = 2;
	optional uint32 deviceid = 3;
	optional fixed64 nonce = 4;
	optional bytes hmac = 5;
}

message CMsgClientServersAvailable {
	repeated .CMsgClientServersAvailable_Server_Types_Available server_types_available = 1;
	optional uint32 server_type_for_auth_services = 2;
}

// Used by: common.proto
message CMsgClientServersAvailable_Server_Types_Available {
	optional uint32 server = 1;
	optional bool changed = 2;
}

message CMsgClientServerTimestampRequest {
	optional uint64 client_request_timestamp = 1;
}

message CMsgClientServerTimestampResponse {
	optional uint64 client_request_timestamp = 1;
	optional uint64 server_timestamp_ms = 2;
}

message CMsgCloudPendingRemoteOperations {
	repeated .CCloud_PendingRemoteOperation operations = 1;
}

message CMsgControllerConfiguration {
	optional string display_name = 1;
	optional string description = 2;
	optional string creator = 3;
	optional int32 controller_type = 4;
	repeated .CMsgGameActionSet sets = 5;
	repeated .CMsgControllerMode modes = 6;
	optional string error_msg = 7;
	optional string action_block_path = 8;
}

// Used by: common.proto
message CMsgControllerInput {
	optional int32 key = 1 [(description) = "enum"];
	repeated .CMsgControllerInputActivator activators = 2;
	repeated .CMsgControllerInputActivator disabled_activators = 3;
}

// Used by: common.proto
message CMsgControllerInputActivator {
	optional int32 activation = 1 [(description) = "enum"];
	repeated .CMsgControllerInputBinding bindings = 2;
	repeated .CMsgControllerSetting settings = 3;
}

// Used by: common.proto
message CMsgControllerInputBinding {
	optional int32 type = 1;
	optional .CMsgControllerInputBinding_KeyBindingData key_binding_data = 2;
	optional .CMsgControllerInputKeyBinding keyboard_key = 3;
	optional .CMsgControllerInputMouseButtonBinding mouse_button = 4;
	optional .CMsgControllerInputGamepadButtonBinding gamepad_button = 5;
	optional .CMsgControllerInputMouseWheelBinding mouse_wheel = 6;
	optional .CMsgControllerInputModeShiftBinding mode_shift = 7;
	optional .CMsgControllerInputGameActionBinding game_action = 8;
	optional .CMsgControllerInputControllerActionBinding controller_action = 9;
}

// Used by: common.proto
message CMsgControllerInputBinding_IconBindingData {
	optional string icon_filename = 1;
	optional string color_foreground = 2;
	optional string color_background = 3;
}

// Used by: common.proto
message CMsgControllerInputBinding_KeyBindingData {
	optional string keys_bound_utf8 = 1;
	optional string friendly_name_utf8 = 2;
	optional .CMsgControllerInputBinding_IconBindingData icon_data = 3;
}

// Used by: common.proto
message CMsgControllerInputControllerActionBinding {
	optional int32 action = 1 [(description) = "enum"];
	optional .CMsgControllerInputControllerActionMouseBinding mouse = 2;
	optional .CMsgControllerInputControllerActionGameActionSetBinding action_set = 3;
	optional .CMsgControllerInputControllerActionLEDColorBinding led_color = 4;
	optional .CMsgControllerInputControllerActionChangePlayerNumberBinding change_player_number = 5;
}

// Used by: common.proto
message CMsgControllerInputControllerActionChangePlayerNumberBinding {
	optional int32 player_number = 1;
}

// Used by: common.proto
message CMsgControllerInputControllerActionGameActionSetBinding {
	optional int32 preset_type = 1 [(description) = "enum"];
	optional string action_set_key = 2;
	optional bool display = 3;
	optional bool beep = 4;
}

// Used by: common.proto
message CMsgControllerInputControllerActionLEDColorBinding {
	optional int32 setting = 1 [(description) = "enum"];
	optional int32 brightness = 2;
	optional int32 saturation = 3;
	optional int32 color_r = 4;
	optional int32 color_g = 5;
	optional int32 color_b = 6;
}

// Used by: common.proto
message CMsgControllerInputControllerActionMouseBinding {
	optional sint32 x = 1;
	optional sint32 y = 2;
	optional bool restore = 3;
}

// Used by: common.proto
message CMsgControllerInputGameActionBinding {
	optional string action_set_key = 1;
	optional string action_key = 2;
}

// Used by: common.proto
message CMsgControllerInputGamepadButtonBinding {
	optional int32 button = 1 [(description) = "enum"];
}

// Used by: common.proto
message CMsgControllerInputKeyBinding {
	optional int32 key = 1 [(description) = "enum"];
}

// Used by: common.proto
message CMsgControllerInputModeShiftBinding {
	optional int32 source = 1 [(description) = "enum"];
}

// Used by: common.proto
message CMsgControllerInputMouseButtonBinding {
	optional int32 button = 1 [(description) = "enum"];
}

// Used by: common.proto
message CMsgControllerInputMouseWheelBinding {
	optional int32 button = 1 [(description) = "enum"];
}

// Used by: common.proto
message CMsgControllerMode {
	optional int32 mode = 1 [(description) = "enum"];
	optional uint32 modeid = 2;
	optional string description = 3;
	repeated .CMsgControllerInput inputs = 4;
	repeated .CMsgControllerSetting settings = 5;
}

// Used by: common.proto
message CMsgControllerSetting {
	optional int32 key = 1 [(description) = "enum"];
	optional sint32 int_value = 2;
	optional sint32 int_min = 3;
	optional sint32 int_max = 4;
	optional sint32 int_default = 5;
}

// Used by: common.proto
message CMsgControllerSourceGroup {
	optional int32 mode = 1 [(description) = "enum"];
	optional .CMsgControllerInputGameActionBinding game_action = 2;
	repeated .CMsgControllerInput inputs = 3;
	repeated .CMsgControllerSetting settings = 4;
	optional .CMsgControllerSourceGroup mode_shift_source_group = 5;
}

// Used by: common.proto
message CMsgControllerSources {
	optional int32 key = 1 [(description) = "enum"];
	optional .CMsgControllerSourceGroup active_group = 2;
}

message CMsgCREGetUserPublishedItemVoteDetails {
	repeated .CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId published_file_ids = 1;
}

// Used by: common.proto
message CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId {
	optional fixed64 published_file_id = 1;
}

message CMsgCREGetUserPublishedItemVoteDetailsResponse {
	optional int32 eresult = 1 [default = 2];
	repeated .CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail user_item_vote_details = 2;
}

// Used by: common.proto
message CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail {
	optional fixed64 published_file_id = 1;
	optional int32 vote = 2 [default = 0];
}

message CMsgCREUpdateUserPublishedItemVote {
	optional fixed64 published_file_id = 1;
	optional bool vote_up = 2;
}

message CMsgCREUpdateUserPublishedItemVoteResponse {
	optional int32 eresult = 1 [default = 2];
}

// Used by: common.proto
message CMsgGameAction {
	optional string key = 1;
	optional string display_name = 2;
	repeated int32 modes = 3 [(description) = "enum"];
}

// Used by: common.proto
message CMsgGameActionBindingType {
	optional int32 key = 1 [(description) = "enum"];
	repeated .CMsgGameAction actions = 2;
}

// Used by: common.proto
message CMsgGameActionSet {
	optional string key = 1;
	optional string display_name = 2;
	optional bool legacy_set = 3;
	repeated .CMsgGameActionSet layers = 4;
	repeated .CMsgGameActionBindingType action_binding_types = 5;
	repeated .CMsgControllerSources source_bindings = 6;
}

// Used by: Community,common.proto
message CMsgIPAddress {
	optional fixed32 v4 = 1;
	optional bytes v6 = 2;
}

message CMsgMulti {
	optional uint32 size_unzipped = 1;
	optional bytes message_body = 2;
}

message CMsgNetworkDeviceConnect {
	optional uint32 device_id = 1 [default = 0];
	optional .CMsgNetworkDeviceConnect_KnownAP ap_known = 2;
	optional .CMsgNetworkDeviceConnect_CustomAP ap_custom = 3;
	optional .CMsgNetworkDeviceConnect_Credentials credentials = 4;
	optional .CMsgNetworkDeviceIP4Config ip4 = 5;
	optional .CMsgNetworkDeviceIP6Config ip6 = 6;
}

// Used by: common.proto
message CMsgNetworkDeviceConnect_Credentials {
	optional string username = 1;
	optional string password = 2;
}

// Used by: common.proto
message CMsgNetworkDeviceConnect_CustomAP {
	optional string ssid = 1;
	optional int32 esecurity = 2;
}

// Used by: common.proto
message CMsgNetworkDeviceConnect_KnownAP {
	optional uint32 ap_id = 1;
}

// Used by: common.proto
message CMsgNetworkDeviceIP4Address {
	optional int32 ip = 1 [default = 0];
	optional int32 netmask = 2;
}

// Used by: common.proto
message CMsgNetworkDeviceIP4Config {
	repeated .CMsgNetworkDeviceIP4Address addresses = 1;
	repeated int32 dns_ip = 2;
	optional int32 gateway_ip = 3;
	optional bool is_dhcp_enabled = 4;
	optional bool is_default_route = 5;
	optional bool is_enabled = 6 [default = false];
}

// Used by: common.proto
message CMsgNetworkDeviceIP6Address {
	optional string ip = 1 [default = ""];
}

// Used by: common.proto
message CMsgNetworkDeviceIP6Config {
	repeated .CMsgNetworkDeviceIP6Address addresses = 1;
	repeated string dns_ip = 2;
	optional string gateway_ip = 3;
	optional bool is_dhcp_enabled = 4;
	optional bool is_default_route = 5;
	optional bool is_enabled = 6 [default = false];
}

message CMsgNetworkDevicesData {
	repeated .CMsgNetworkDevicesData_Device devices = 1;
	optional bool is_wifi_enabled = 2;
	optional bool is_wifi_scanning_enabled = 3;
}

// Used by: common.proto
message CMsgNetworkDevicesData_Device {
	optional uint32 id = 1 [default = 0];
	optional int32 etype = 2;
	optional int32 estate = 3;
	optional string mac = 4;
	optional string vendor = 5;
	optional string product = 6;
	optional .CMsgNetworkDeviceIP4Config ip4 = 7;
	optional .CMsgNetworkDeviceIP6Config ip6 = 8;
	optional .CMsgNetworkDevicesData_Device_Wired wired = 9;
	optional .CMsgNetworkDevicesData_Device_Wireless wireless = 10;
}

// Used by: common.proto
message CMsgNetworkDevicesData_Device_Wired {
	optional bool is_cable_present = 1 [default = false];
	optional uint32 speed_mbit = 2;
	optional string friendly_name = 3;
}

// Used by: common.proto
message CMsgNetworkDevicesData_Device_Wireless {
	repeated .CMsgNetworkDevicesData_Device_Wireless_AP aps = 1;
	optional int32 esecurity_supported = 2;
}

// Used by: common.proto
message CMsgNetworkDevicesData_Device_Wireless_AP {
	optional uint32 id = 1 [default = 0];
	optional int32 estrength = 2;
	optional string ssid = 3;
	optional bool is_active = 4;
	optional bool is_autoconnect = 5;
	optional int32 esecurity = 6;
	optional string user_name = 7;
	optional string password = 8;
	optional int32 strength_raw = 9;
}

message CMsgProtoBufHeader {
	optional fixed64 steamid = 1;
	optional int32 client_sessionid = 2;
	optional uint32 routing_appid = 3;
	optional fixed64 jobid_source = 10 [default = 18446744073709551615];
	optional fixed64 jobid_target = 11 [default = 18446744073709551615];
	optional string target_job_name = 12;
	optional int32 eresult = 13 [default = 2];
	optional string error_message = 14;
	optional uint32 ip = 15;
	optional uint32 auth_account_flags = 16;
	optional int32 transport_error = 17 [default = 1];
	optional uint64 messageid = 18 [default = 18446744073709551615];
	optional uint32 publisher_group_id = 19;
	optional uint32 sysid = 20;
	optional uint64 trace_tag = 21;
	optional uint32 token_source = 22;
	optional bool admin_spoofing_user = 23;
	optional int32 seq_num = 24;
	optional uint32 webapi_key_id = 25;
	optional bool is_from_external_source = 26;
	repeated uint32 forward_to_sysid = 27;
	optional uint32 cm_sysid = 28;
	optional bytes ip_v6 = 29;
	optional uint32 launcher_type = 31 [default = 0];
	optional uint32 realm = 32 [default = 0];
}

message CMsgSetControllerActionSet {
	optional string action_set_key = 1;
	optional string action_set_layer_key = 2;
	optional string new_display_name = 3;
}

message CMsgSetControllerInputActivator {
	optional string action_set_key = 1;
	optional string action_set_layer_key = 2;
	optional int32 source_binding_key = 3 [(description) = "enum"];
	optional bool mode_shift = 4;
	optional int32 input_key = 5 [(description) = "enum"];
	optional int32 activator_index = 6;
	optional int32 new_activation = 7 [(description) = "enum"];
	optional .CMsgControllerSetting new_setting = 8;
}

message CMsgSetControllerInputActivatorEnabled {
	optional string action_set_key = 1;
	optional string action_set_layer_key = 2;
	optional int32 source_binding_key = 3 [(description) = "enum"];
	optional bool mode_shift = 4;
	optional int32 input_key = 5 [(description) = "enum"];
	optional int32 activator_index = 6;
	optional bool enabled = 7;
}

message CMsgSetControllerInputBinding {
	optional string action_set_key = 1;
	optional string action_set_layer_key = 2;
	optional int32 source_binding_key = 3 [(description) = "enum"];
	optional bool mode_shift = 4;
	optional int32 input_key = 5 [(description) = "enum"];
	optional int32 activator_index = 6;
	optional int32 binding_index = 7;
	optional .CMsgControllerInputBinding new_binding = 8;
	optional int32 source_mode = 9 [(description) = "enum"];
}

message CMsgSetControllerSourceMode {
	optional string action_set_key = 1;
	optional string action_set_layer_key = 2;
	optional int32 source_binding_key = 3 [(description) = "enum"];
	optional bool mode_shift = 4;
	optional int32 new_mode = 5 [(description) = "enum"];
	optional .CMsgControllerInputGameActionBinding new_game_action = 6;
	optional .CMsgControllerSetting new_setting = 7;
}

// Used by: common.proto
message CMsgSteamDatagramConnectionQuality {
	optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
	optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
}

// Used by: common.proto
message CMsgSteamDatagramLinkInstantaneousStats {
	optional uint32 out_packets_per_sec_x10 = 1;
	optional uint32 out_bytes_per_sec = 2;
	optional uint32 in_packets_per_sec_x10 = 3;
	optional uint32 in_bytes_per_sec = 4;
	optional uint32 ping_ms = 5;
	optional uint32 packets_dropped_pct = 6;
	optional uint32 packets_weird_sequence_pct = 7;
	optional uint32 peak_jitter_usec = 8;
}

// Used by: common.proto
message CMsgSteamDatagramLinkLifetimeStats {
	optional uint32 connected_seconds = 2;
	optional uint64 packets_sent = 3;
	optional uint64 kb_sent = 4;
	optional uint64 packets_recv = 5;
	optional uint64 kb_recv = 6;
	optional uint64 packets_recv_sequenced = 7;
	optional uint64 packets_recv_dropped = 8;
	optional uint64 packets_recv_out_of_order = 9;
	optional uint64 packets_recv_duplicate = 10;
	optional uint64 packets_recv_lurch = 11;
	repeated uint64 multipath_packets_recv_sequenced = 12;
	repeated uint64 multipath_packets_recv_later = 13;
	optional uint32 multipath_send_enabled = 14;
	optional uint32 quality_histogram_100 = 21;
	optional uint32 quality_histogram_99 = 22;
	optional uint32 quality_histogram_97 = 23;
	optional uint32 quality_histogram_95 = 24;
	optional uint32 quality_histogram_90 = 25;
	optional uint32 quality_histogram_75 = 26;
	optional uint32 quality_histogram_50 = 27;
	optional uint32 quality_histogram_1 = 28;
	optional uint32 quality_histogram_dead = 29;
	optional uint32 quality_ntile_2nd = 30;
	optional uint32 quality_ntile_5th = 31;
	optional uint32 quality_ntile_25th = 32;
	optional uint32 quality_ntile_50th = 33;
	optional uint32 ping_histogram_25 = 41;
	optional uint32 ping_histogram_50 = 42;
	optional uint32 ping_histogram_75 = 43;
	optional uint32 ping_histogram_100 = 44;
	optional uint32 ping_histogram_125 = 45;
	optional uint32 ping_histogram_150 = 46;
	optional uint32 ping_histogram_200 = 47;
	optional uint32 ping_histogram_300 = 48;
	optional uint32 ping_histogram_max = 49;
	optional uint32 ping_ntile_5th = 50;
	optional uint32 ping_ntile_50th = 51;
	optional uint32 ping_ntile_75th = 52;
	optional uint32 ping_ntile_95th = 53;
	optional uint32 ping_ntile_98th = 54;
	optional uint32 jitter_histogram_negligible = 61;
	optional uint32 jitter_histogram_1 = 62;
	optional uint32 jitter_histogram_2 = 63;
	optional uint32 jitter_histogram_5 = 64;
	optional uint32 jitter_histogram_10 = 65;
	optional uint32 jitter_histogram_20 = 66;
	optional uint32 txspeed_max = 67;
	optional uint32 txspeed_histogram_16 = 68;
	optional uint32 txspeed_histogram_32 = 69;
	optional uint32 txspeed_histogram_64 = 70;
	optional uint32 txspeed_histogram_128 = 71;
	optional uint32 txspeed_histogram_256 = 72;
	optional uint32 txspeed_histogram_512 = 73;
	optional uint32 txspeed_histogram_1024 = 74;
	optional uint32 txspeed_histogram_max = 75;
	optional uint32 txspeed_ntile_5th = 76;
	optional uint32 txspeed_ntile_50th = 77;
	optional uint32 txspeed_ntile_75th = 78;
	optional uint32 txspeed_ntile_95th = 79;
	optional uint32 txspeed_ntile_98th = 80;
	optional uint32 rxspeed_max = 81;
	optional uint32 rxspeed_histogram_16 = 82;
	optional uint32 rxspeed_histogram_32 = 83;
	optional uint32 rxspeed_histogram_64 = 84;
	optional uint32 rxspeed_histogram_128 = 85;
	optional uint32 rxspeed_histogram_256 = 86;
	optional uint32 rxspeed_histogram_512 = 87;
	optional uint32 rxspeed_histogram_1024 = 88;
	optional uint32 rxspeed_histogram_max = 89;
	optional uint32 rxspeed_ntile_5th = 90;
	optional uint32 rxspeed_ntile_50th = 91;
	optional uint32 rxspeed_ntile_75th = 92;
	optional uint32 rxspeed_ntile_95th = 93;
	optional uint32 rxspeed_ntile_98th = 94;
}

// Used by: common.proto
message CMsgSteamDatagramP2PRoutingSummary {
	optional .CMsgSteamNetworkingICESessionSummary ice = 2;
	optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
}

// Used by: common.proto
message CMsgSteamNetworkingICESessionSummary {
	optional uint32 local_candidate_types = 1;
	optional uint32 remote_candidate_types = 2;
	optional uint32 initial_route_kind = 3;
	optional uint32 initial_ping = 4;
	optional uint32 negotiation_ms = 5;
	optional uint32 initial_score = 6;
	optional uint32 failure_reason_code = 7;
	optional uint32 selected_seconds = 12;
	optional uint32 user_settings = 13;
	optional uint32 ice_enable_var = 14;
	optional uint32 local_candidate_types_allowed = 15;
	optional uint32 best_route_kind = 16;
	optional uint32 best_ping = 17;
	optional uint32 best_score = 18;
	optional uint32 best_time = 19;
}

// Used by: common.proto
message CMsgSteamNetworkingP2PSDRRoutingSummary {
	optional uint32 initial_ping = 1;
	optional uint32 initial_ping_front_local = 2;
	optional uint32 initial_ping_front_remote = 3;
	optional uint32 initial_score = 4;
	optional fixed32 initial_pop_local = 5;
	optional fixed32 initial_pop_remote = 6;
	optional uint32 negotiation_ms = 7;
	optional uint32 selected_seconds = 8;
	optional uint32 best_ping = 11;
	optional uint32 best_ping_front_local = 12;
	optional uint32 best_ping_front_remote = 13;
	optional uint32 best_score = 14;
	optional fixed32 best_pop_local = 15;
	optional fixed32 best_pop_remote = 16;
	optional uint32 best_time = 17;
}

message CMsgStorageDevicesData {
	repeated .CMsgStorageDevicesData_Drive drives = 1;
	repeated .CMsgStorageDevicesData_BlockDevice block_devices = 2;
}

// Used by: common.proto
message CMsgStorageDevicesData_BlockDevice {
	optional uint32 id = 1 [default = 0];
	optional uint32 drive_id = 2 [default = 0];
	optional string path = 3;
	optional string friendly_path = 4;
	optional string label = 5;
	optional uint64 size_bytes = 6;
	optional bool is_formattable = 7;
	optional bool is_read_only = 8;
	optional bool is_root_device = 9;
	optional int32 content_type = 10 [(description) = "enum"];
	optional int32 filesystem_type = 11 [(description) = "enum"];
	optional string mount_path = 12;
}

// Used by: common.proto
message CMsgStorageDevicesData_Drive {
	optional uint32 id = 1 [default = 0];
	optional string model = 2;
	optional string vendor = 3;
	optional string serial = 4;
	optional bool is_ejectable = 5;
	optional uint64 size_bytes = 6;
}

message CMsgSystemManagerSettings {
	optional float idle_backlight_dim_battery_seconds = 1;
	optional float idle_backlight_dim_ac_seconds = 2;
	optional float idle_suspend_battery_seconds = 3;
	optional float idle_suspend_ac_seconds = 4;
	optional bool idle_suspend_supressed = 5;
	optional bool automatic_display_brightness_enabled = 6;
	optional float als_lux_latest = 7;
	optional float als_lux_median = 8;
	optional float display_brightness_linear = 9;
}

// Used by: common.proto
message CMsgSystemPerfDiagnosticEntry {
	optional string name = 1;
	optional string value = 2;
}

message CMsgSystemPerfDiagnosticInfo {
	repeated .CMsgSystemPerfDiagnosticEntry entries = 1;
	repeated .CMsgSystemPerfNetworkInterface interfaces = 2;
}

// Used by: common.proto
message CMsgSystemPerfNetworkInterface {
	optional string name = 1;
	optional double timestamp = 2;
	optional int64 tx_bytes_total = 3;
	optional int64 rx_bytes_total = 4;
	optional int32 tx_bytes_per_sec = 5;
	optional int32 rx_bytes_per_sec = 6;
}

message CMsgSystemPerfSettings {
	optional float diagnostic_update_rate = 1;
	optional int32 system_trace_service_state = 2 [(description) = "enum"];
	optional int32 graphics_profiling_service_state = 3 [(description) = "enum"];
	optional int32 perf_overlay_service_state = 4 [(description) = "enum"];
	optional int32 perf_overlay_level = 5 [(description) = "enum"];
	repeated int32 gpu_performance_levels_available = 6 [(description) = "enum"];
	optional int32 gpu_performance_level = 7 [(description) = "enum"];
	optional int32 gpu_performance_manual_mhz = 8;
	optional int32 gpu_performance_manual_min_mhz = 9;
	optional int32 gpu_performance_manual_max_mhz = 10;
	optional bool perf_overlay_is_standalone = 11;
	optional int32 fps_limit = 12;
	optional bool is_variable_resolution_enabled = 13;
	optional bool is_dynamic_refresh_rate_enabled = 14;
	optional int32 tdp_limit = 15;
	optional int32 cpu_governor = 16 [(description) = "enum"];
	optional int32 cpu_governor_manual_mhz = 17;
	optional bool is_fsr_enabled = 18;
	optional int32 fsr_sharpness = 19;
	optional int32 cpu_governor_manual_min_mhz = 20;
	optional int32 cpu_governor_manual_max_mhz = 21;
	optional int32 fsr_sharpness_min = 22;
	optional int32 fsr_sharpness_max = 23;
}

message CMsgUpdaterInfo {
	optional int32 state = 1 [(description) = "enum"];
	optional int32 previous_state = 2 [(description) = "enum"];
	optional int32 eresult_previous_state = 3 [default = 2];
	optional .CMsgUpdaterProgress progress = 4;
}

// Used by: common.proto
message CMsgUpdaterProgress {
	optional float stage_progress = 1;
	optional int64 stage_size_bytes = 2;
	optional fixed32 rtime_estimated_completion = 3;
}

message CProductImpressionsFromClient_Notification {
	repeated .CProductImpressionsFromClient_Notification_Impression impressions = 1;
}

// Used by: common.proto
message CProductImpressionsFromClient_Notification_Impression {
	optional int32 type = 1 [(description) = "enum"];
	optional uint32 appid = 2;
	optional uint32 num_impressions = 3;
}

// Used by: common.proto
message CSteamDeckCompatTestResult {
	optional int32 test = 1;
	optional int32 test_result = 2;
	optional string test_loc_token = 3;
}

// Used by: StoreBrowse,PartnerStoreBrowse
message CStoreBrowse_GetItems_Request {
	repeated .StoreItemID ids = 1;
	optional .StoreBrowseContext context = 2;
	optional .StoreBrowseItemDataRequest data_request = 3;
}

// Used by: StoreBrowse,PartnerStoreBrowse
message CStoreBrowse_GetItems_Response {
	repeated .StoreItem store_items = 1;
}

message CStreamingClientConfig {
	optional int32 quality = 1 [default = 2, (description) = "enum"];
	optional uint32 maximum_resolution_x = 2;
	optional uint32 maximum_resolution_y = 3;
	optional uint32 maximum_framerate_numerator = 4;
	optional uint32 maximum_framerate_denominator = 5;
	optional int32 maximum_bitrate_kbps = 6 [default = -1];
	optional bool enable_hardware_decoding = 7 [default = true];
	optional bool enable_performance_overlay = 8 [default = false];
	optional bool enable_video_streaming = 9 [default = true];
	optional bool enable_audio_streaming = 10 [default = true];
	optional bool enable_input_streaming = 11 [default = true];
	optional int32 audio_channels = 12 [default = 2];
	optional bool enable_video_hevc = 13 [default = false];
	optional bool enable_performance_icons = 14 [default = true];
	optional bool enable_microphone_streaming = 15 [default = false];
	optional string controller_overlay_hotkey = 16;
	optional bool enable_touch_controller = 17 [default = false];
	optional int32 p2p_scope = 19 [default = 0, (description) = "enum"];
}

message CStreamingServerConfig {
	optional bool change_desktop_resolution = 1;
	optional bool dynamically_adjust_resolution = 2;
	optional bool enable_capture_nvfbc = 3;
	optional bool enable_hardware_encoding_nvidia = 4;
	optional bool enable_hardware_encoding_amd = 5;
	optional bool enable_hardware_encoding_intel = 6;
	optional int32 software_encoding_threads = 7;
	optional bool enable_traffic_priority = 8;
	optional int32 host_play_audio = 9 [default = 0, (description) = "enum"];
}

// Used by: LoyaltyRewards,SaleItemRewards
message LoyaltyRewardDefinition {
	optional uint32 appid = 1;
	optional uint32 defid = 2;
	optional int32 type = 3 [(description) = "enum"];
	optional int32 community_item_class = 4;
	optional uint32 community_item_type = 5;
	optional int64 point_cost = 6;
	optional uint32 timestamp_created = 7;
	optional uint32 timestamp_updated = 8;
	optional uint32 timestamp_available = 9;
	optional int64 quantity = 10;
	optional string internal_description = 11;
	optional bool active = 12;
	optional .LoyaltyRewardDefinition_CommunityItemData community_item_data = 13;
	optional uint32 timestamp_available_end = 14;
	repeated uint32 bundle_defids = 15;
	optional uint32 usable_duration = 16;
	optional uint32 bundle_discount = 17;
}

// Used by: LoyaltyRewards,SaleItemRewards
message LoyaltyRewardDefinition_BadgeData {
	optional int32 level = 1;
	optional string image = 2;
}

// Used by: LoyaltyRewards,SaleItemRewards
message LoyaltyRewardDefinition_CommunityItemData {
	optional string item_name = 1;
	optional string item_title = 2;
	optional string item_description = 3;
	optional string item_image_small = 4;
	optional string item_image_large = 5;
	optional string item_movie_webm = 6;
	optional string item_movie_mp4 = 7;
	optional bool animated = 8;
	repeated .LoyaltyRewardDefinition_BadgeData badge_data = 9;
	optional string item_movie_webm_small = 10;
	optional string item_movie_mp4_small = 11;
	optional string profile_theme_id = 12;
}

message NotImplemented {
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreBrowseContext {
	optional string language = 1;
	optional int32 elanguage = 2;
	optional string country_code = 3;
	optional int32 steam_realm = 4;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreBrowseItemDataRequest {
	optional bool include_assets = 1;
	optional bool include_release = 2;
	optional bool include_platforms = 3;
	optional bool include_all_purchase_options = 4;
	optional bool include_screenshots = 5;
	optional bool include_trailers = 6;
	optional bool include_ratings = 7;
	optional int32 include_tag_count = 8;
	optional bool include_reviews = 9;
	optional bool include_basic_info = 10;
	optional bool include_supported_languages = 11;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreGameRating {
	optional string type = 1;
	optional string rating = 2;
	repeated string descriptors = 3;
	optional string interactive_elements = 4;
	optional int32 required_age = 10;
	optional bool use_age_gate = 11;
	optional string image_url = 20;
	optional string image_target = 21;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem {
	optional int32 item_type = 1 [(description) = "enum"];
	optional uint32 id = 2;
	optional uint32 success = 3;
	optional bool visible = 4;
	optional bool unvailable_for_country_restriction = 5;
	optional string name = 6;
	optional string store_url_path = 7;
	optional uint32 appid = 9;
	optional int32 type = 10 [(description) = "enum"];
	repeated int32 included_types = 11 [(description) = "enum"];
	repeated uint32 included_appids = 12;
	optional bool is_free = 13;
	optional bool is_early_access = 14;
	optional .StoreItem_RelatedItems related_items = 15;
	repeated int32 content_descriptorids = 20 [(description) = "enum"];
	repeated uint32 tagids = 21;
	optional .StoreItem_Categories categories = 22;
	optional .StoreItem_Reviews reviews = 23;
	optional .StoreItem_BasicInfo basic_info = 24;
	repeated .StoreItem_Tag tags = 25;
	optional .StoreItem_Assets assets = 30;
	optional .StoreItem_ReleaseInfo release = 31;
	optional .StoreItem_Platforms platforms = 32;
	optional .StoreGameRating game_rating = 33;
	optional .StoreItem_PurchaseOption best_purchase_option = 40;
	repeated .StoreItem_PurchaseOption purchase_options = 41;
	repeated .StoreItem_PurchaseOption accessories = 42;
	optional .StoreItem_Screenshots screenshots = 50;
	optional .StoreItem_Trailers trailers = 51;
	repeated .StoreItem_SupportedLanguage supported_languages = 52;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Assets {
	optional string asset_url_format = 1;
	optional string main_capsule = 2;
	optional string small_capsule = 3;
	optional string header = 4;
	optional string package_header = 5;
	optional string page_background = 6;
	optional string hero_capsule = 7;
	optional string hero_capsule_2x = 8;
	optional string library_capsule = 9;
	optional string library_capsule_2x = 10;
	optional string library_hero = 11;
	optional string library_hero_2x = 12;
	optional string community_icon = 13;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_BasicInfo {
	optional string short_description = 1;
	repeated .StoreItem_BasicInfo_CreatorHomeLink publishers = 2;
	//repeated string publishers = 2;
	repeated .StoreItem_BasicInfo_CreatorHomeLink developers = 3;
	//repeated string developers = 3;
	repeated .StoreItem_BasicInfo_CreatorHomeLink franchises = 4;
	//repeated string franchises = 4;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_BasicInfo_CreatorHomeLink {
	optional string name = 1;
	optional uint32 creator_clan_account_id = 2;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Categories {
	repeated uint32 supported_player_categoryids = 2;
	repeated uint32 feature_categoryids = 3;
	repeated uint32 controller_categoryids = 4;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Platforms {
	optional bool windows = 1;
	optional bool mac = 2;
	optional bool linux = 3;
	optional .StoreItem_Platforms_VRSupport vr_support = 10;
	optional int32 steam_deck_compat_category = 11 [(description) = "enum"];
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Platforms_VRSupport {
	optional bool vrhmd = 1;
	optional bool vrhmd_only = 2;
	optional bool htc_vive = 40;
	optional bool oculus_rift = 41;
	optional bool windows_mr = 42;
	optional bool valve_index = 43;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_PurchaseOption {
	optional int32 packageid = 1;
	optional int32 bundleid = 2;
	optional string purchase_option_name = 3;
	optional int64 final_price_in_cents = 5;
	optional int64 original_price_in_cents = 6;
	optional int64 user_final_price_in_cents = 7;
	optional string formatted_final_price = 8;
	optional string formatted_original_price = 9;
	optional int32 discount_pct = 10;
	optional int32 user_discount_pct = 11;
	optional int32 bundle_discount_pct = 12;
	repeated .StoreItem_PurchaseOption_Discount active_discounts = 20;
	repeated .StoreItem_PurchaseOption_Discount user_active_discounts = 21;
	repeated .StoreItem_PurchaseOption_Discount inactive_discounts = 22;
	optional bool user_can_purchase = 30;
	optional bool user_can_purchase_as_gift = 31;
	optional bool is_commercial_license = 40;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_PurchaseOption_Discount {
	optional int64 discount_amount = 1;
	optional string discount_description = 2;
	optional uint32 discount_end_date = 3;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_RelatedItems {
	optional uint32 parent_appid = 1;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_ReleaseInfo {
	optional uint32 steam_release_date = 1;
	optional uint32 original_release_date = 2;
	optional uint32 original_steam_release_date = 3;
	optional bool is_coming_soon = 4;
	optional bool is_preload = 5;
	optional string custom_release_date_message = 6;
	optional bool is_abridged_release_date = 7;
	optional bool is_early_access = 10;
	optional uint32 mac_release_date = 20;
	optional uint32 linux_release_date = 21;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Reviews {
	optional .StoreItem_Reviews_StoreReviewSummary summary_filtered = 1;
	optional .StoreItem_Reviews_StoreReviewSummary summary_unfiltered = 2;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Reviews_StoreReviewSummary {
	optional uint32 review_count = 1;
	optional int32 percent_positive = 2;
	optional int32 review_score = 3 [(description) = "enum"];
	optional string review_score_label = 4;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Screenshots {
	repeated .StoreItem_Screenshots_Screenshot all_ages_screenshots = 2;
	repeated .StoreItem_Screenshots_Screenshot mature_content_screenshots = 3;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Screenshots_Screenshot {
	optional string filename = 1;
	optional int32 ordinal = 2;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_SupportedLanguage {
	optional int32 elanguage = 1;
	optional bool supported = 2;
	optional bool full_audio = 3;
	optional bool subtitles = 4;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Tag {
	optional uint32 tagid = 1;
	optional uint32 weight = 2;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Trailers {
	repeated .StoreItem_Trailers_Trailer highlights = 1;
	repeated .StoreItem_Trailers_Trailer other_trailers = 2;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Trailers_Trailer {
	optional string trailer_name = 1;
	optional string trailer_url_format = 2;
	repeated .StoreItem_Trailers_VideoSource trailer_480p = 3;
	repeated .StoreItem_Trailers_VideoSource trailer_max = 4;
	repeated .StoreItem_Trailers_VideoSource microtrailer = 5;
	optional string screenshot_medium = 10;
	optional string screenshot_full = 11;
	optional int32 trailer_base_id = 12;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItem_Trailers_VideoSource {
	optional string filename = 1;
	optional string type = 2;
}

// Used by: StoreQuery,StoreBrowse,PartnerStoreBrowse
message StoreItemID {
	optional uint32 appid = 1;
	optional uint32 packageid = 2;
	optional uint32 bundleid = 3;
}

